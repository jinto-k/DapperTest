1. In dapper, while querying a database, the  format is ("query", parameters)
2. The parameters can be given as an object in a dictionary like manner.
3.In PlayersController, GetPlayerById(int id) method uses an Id as an input
	      var player = await connection.QueryAsync<Player>
		  ("Select * from Employee where Id in @Id", new { Id = id });
4. The same method, if we have to give multiple values for Id, can be written as
	      IEnumerable<Player> player = await connection.QueryAsync<Player>
		  ("Select * from Employee where Id in @Id", new { Id = new List<int> { 2, 13002 } });
5. Similarly if the input has same values as a model, we can pass the model
	       await connection.ExecuteAsync("Insert into Employee (Name,Department,Age,Address) 
		   values (@Name , @Department, @Age, @Address)", player);

		   where 'player' is a model with Name,Department,Age and Address


			QUERIES

6. ExecuteScalar is Used when we have to return just a single value. like when the query returns a name, rowcount, sum,etc.
	
	*ExecuteScalar: Returns the first column of the first row as a dynamic type(an object)
	*ExecuteScalar<T>: Returns the first column of the first row as a specified type
	*ExecuteScalarAsync
	*ExecuteScalarAsync<T>

7.To query a single row of data we can use different methods:

	*QuerySingle: returns only one row of dynamic type. Throws error when zero or more than one element is returned
	*QuerySingle<T>: returns only one row of specified type. Throws error when zero or more than one element is returned
	*QuerySingleAsync
	*QuerySingleAsync<T>

	*QuerySingleOrDefault: Use when zero or one row is expected.Throws error when more than one row is returned
	*QuerySingleOrDefault<T>: Use when zero or one row is expected.Throws error when more than one row is returned
	*QuerySingleOrDefaultAync
	*QuerySingleOrDefaultAync<T>

	*QueryFirst: Returns first row as dynamic type when there are more than one rows expected. Throws error when query returns zero elements
	*QueryFirst<T>: Returns first row as Specified type when there are more than one rows expected. Throws error when query returns zero elements
	*QueryFirstAsync
	*QueryFirstAsync<T>

	*QueryFirstOrDefault: Returns first row as dynamic type when there are more than one rows or zero rows expected. 
	*QueryFirstOrDefault<T>: Returns first row as Specified type when there are more than one rows or zero rows  expected.
	*QueryFirstOrDefaultAsync
	*QueryFirstOrDefaultAsync<T>

8. To query multiple rows of data we can use Query methods:

	*Query: Returns an enumerable of dynamic type
	*Query<T>: Returns an enumerable of specified type
	*QueryAsync
	*QueryAsync<T>

9. To Use Multiple SQL queries (refer secondController)

	*QueryMultiple: Execute multiple queries within a single DB and returns a GridReader to map the results
	*QueryMultipleAsync

	After using QueryMultiple we can use methods like Read<T>, ReadFirst<T>,ReadSingle<T>,etc. These Methods act like Query Methods of the same name

10. To Query specific columns you can simply mention it in the query itself

11. We can also run nonquery commands that does not return datasets for UPDATE,CREATE,DELETE.'

	* Execute: takes sql query and parameters as arguments. Returns an Int representing the number of rows affected.
	* ExecuteAsync:

12. ExecuteReader Method is used to get instance of IDataReader as output.
	
	*ExecuteReader: params are sql,parameters, transaction(optional),commandTimeout(default 30s),commandType(SP,etc.).Gives finer control over data
	*ExecuteReaderAsync:

13. Using SP in Dapper: refer secondController
	* we can use DynamicParameters to add the parameters required for the SP
		eg: dynamicParameters.Add("Id", id,DbType.Int32);

		* As far as I know, dynamicParameters.Get<int>("Id") can be used to get the value of a parameter inside the dynamicParameters


	*  T result = await connection.QueryFirstOrDefaultAsync<T>("NameOfSP",dynamicParameters,commandType: CommandType.StoredProcedure);
		

		commandType is available as both Text and Stored Procedure. Text is the default

14.In Daper, we can add parameters in two ways:
	
	*Anonymous parameters: IEnumerable<Player> player = await connection.QueryAsync<Player>("Select * from Employee where Id in @Id and Age =@Age",
                new
                {
                    Id = new List<int> { 2, 13002 },
                    Age = age
                });

	*Dynamic Parameters: var parameter = new DynamicParameters();
										 parameter.Add("@Id", id, DbType.Int32)

15. DynamicParamters class is used for adding dynamic parameters in Dapper:

	*we can use the constructor to add parameters:
								var dictionary = new Dictionary<string, object>
												{
													 { "@ProductId", 1 }
												};
								var parameters = new DynamicParameters(dictionary);

	* we can also add anonymous types: var parameters = new DynamicParameters({ ProductId = 1 });

	*Mainly we use Add method provided by the DynamicParameters class: var parameter = new DynamicParameters();
																							parameter.Add("@Id", id, DbType.Int32)

	* We can also use String parameters for further security purposes. Refer GetCricketerByName() in SecondController

16. Table Valued Parameters can be used when we have to use UDT in the DB side

	* Creating a table

		DataTable tableFacilitationGroupParticipants = new(); //name of the table can be added inside paranthesis
				tableFacilitationGroupParticipants.Columns.Add("FacilitationGroupId", typeof(int));
				tableFacilitationGroupParticipants.Columns.Add("ParticipantId", typeof(int));

	* Adding values to the created datatable:
		
		tableFacilitationGroupParticipants.Rows.Add(group.Id, participant.EmployeeID);

	* Adding the table as a parameter:
		
		        parameters.Add("FacilitationGroupParticipants", tableFacilitationGroupParticipants.AsTableValuedParameter("[LD].[UDT_FAcilitationGroupParticipants]"));

17.We can also add output parameters to get the data from the sql. Refer second controller
	
	* In the SP we have to mention the output parameter

	*While we are querying the data base also we have to specifically mention the output parameter.

	*eg: ALTER PROCEDURE GetCricketerById  
		(
		    @Id INT,
		    @Team NVARCHAR(50) OUTPUT
		)  
		AS  
		BEGIN  
			-- Set the @Team output parameter
		 SELECT @Team = Team 
		 FROM [dbo].[Cricketers] 
		 WHERE Id = @Id;
		END

	*On the code side we have to add the parameter to the dynamicparameter and give it value of null and direction as output. also Type is mentioned
		            dynamicParameters.Add("Team", null, DbType.String, direction: ParameterDirection.Output, 50);

	*This output parameter will then be added to the dynamicparameters and can be accessed with the Get method.
					dynamicParameters.Get<string>("Team");

18.Spliton: We can query multiple tables and map it using dapper by using spliton parameter

	* eg code snippet

		var result = await connection.QueryAsync<Cricketer, InternationalTeam, Cricket>(sql, (cricketer, internationalTeam) =>
                         {
                             Cricket cricket = new Cricket()
                             {
                                 Cricketer = cricketer,
                                 InternationalTeam = internationalTeam
                             };
                             return cricket;
                         },splitOn: "Name");

	*We can use the QueryAsync method with input types and expected type for this purpose. Here in QueryAsync<Cricketer, InternationalTeam, Cricket>
	 Crickters and InternationalTeam are input parameters and Cricket is the output parameter.

	*After the sql query,a lambda function is used to map the values into different types. The input parameters of the lambda function are dependent on
	 the types mentioned in QueryAsync method. Here, since 2 input types are specified, the lambda function also has 2 parameters.

	*Then the  values are mapped as shown above.






